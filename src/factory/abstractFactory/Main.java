package factory.abstractFactory;

/**
 * 抽象工厂模式：
 * 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
 *
 * 抽象工厂模式与创造者模式的区别：
 * 相对来说，抽象工厂模式比建造者模式的尺度要大，
 * 抽象工厂模式每个产品的构建过程(构造过程指每个零件的组装)在工厂实现类中已经定义好，不能再改变。它关注产品整体。工厂自己定义多种产品。
 * 而建造者模式关注构建过程，因此建造者模式主类能够随意组装零件,即可很容易地构建出一个崭新的产品。主类可以组装出多种产品。
 * 也正因为如此，两者的应用场景截然不同，如果希望屏蔽对象的创建过程，只提供一个封装良好的对象，
 * 则可以选择抽象工厂方法模式。
 * 而建造者模式可以用在构件的装配方面，如通过装配不同的组件或者相同组件的不同顺序，
 * 可以产生出一个新的对象，它可以产生一个非常灵活的架构，方便地扩展和维护系统。
 *
 * 举例：抽象工厂模式好比电脑工厂虽然可以生产出各种型号的零件，
 * 但是具体生产一种主机的时候的每个零件的组合已经确定，比如华硕的武极主机，在生产的时候已经确定好了，
 * 用华硕GTX1660显卡，三星的内存和固态，intel的i7 8700 cpu。工厂定义了多种类型主机，在卖的时候，是卖主机整体。
 *
 * 建造者模式好比自己组装一个主机，工厂有着各种型号的零件，只要硬件兼容，自己可以随意选择，
 * 可以组装出一台 美商海盗船的机箱、七彩虹RTX 2080、三星的内存和固态、Intel的i9 9900K。工厂可以让你自己选择硬件，自己组装出多种类型主机。
 */
public class Main {
}
